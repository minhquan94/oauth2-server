{"remainingRequest":"C:\\Project\\oauth2-server\\web-app\\node_modules\\thread-loader\\dist\\cjs.js??ref--10-2!C:\\Project\\oauth2-server\\web-app\\node_modules\\ts-loader\\index.js??ref--10-3!C:\\Project\\oauth2-server\\web-app\\node_modules\\angular-router-loader\\src\\index.js!C:\\Project\\oauth2-server\\web-app\\node_modules\\tslint-loader\\index.js!C:\\Project\\oauth2-server\\web-app\\src\\app\\services\\authentication.service.ts","dependencies":[{"path":"C:\\Project\\oauth2-server\\web-app\\src\\app\\services\\authentication.service.ts","mtime":1536256312992},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1536167841040},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\ts-loader\\index.js","mtime":1530127508000},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar AuthenticationService = /** @class */ (function () {\r\n    function AuthenticationService(http) {\r\n        this.http = http;\r\n    }\r\n    AuthenticationService.prototype.login = function (username, password) {\r\n        return this.http.post('/user/login', { username: username, password: password })\r\n            .pipe(operators_1.map(function (user) {\r\n            // login successful if there's a jwt token in the response\r\n            if (user && user.token) {\r\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                localStorage.setItem('currentUser', JSON.stringify(user));\r\n            }\r\n            return user;\r\n        }));\r\n    };\r\n    AuthenticationService.prototype.logout = function () {\r\n        // remove user from local storage to log user out\r\n        localStorage.removeItem('currentUser');\r\n    };\r\n    var _a;\r\n    AuthenticationService = tslib_1.__decorate([\r\n        core_1.Injectable(),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\r\n    ], AuthenticationService);\r\n    return AuthenticationService;\r\n}());\r\nexports.AuthenticationService = AuthenticationService;\r\n",{"version":3,"file":"C:\\Project\\oauth2-server\\web-app\\src\\app\\services\\authentication.service.ts","sourceRoot":"","sources":["C:\\Project\\oauth2-server\\web-app\\node_modules\\angular-router-loader\\src\\index.js!C:\\Project\\oauth2-server\\web-app\\node_modules\\tslint-loader\\index.js!C:\\Project\\oauth2-server\\web-app\\src\\app\\services\\authentication.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,6CAAkD;AAClD,4CAAqC;AAGrC;IACI,+BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,qCAAK,GAAL,UAAM,QAAgB,EAAE,QAAgB;QACpC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,aAAa,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;aAChF,IAAI,CAAC,eAAG,CAAC,UAAA,IAAI;YACV,0DAA0D;YAC1D,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;gBACpB,kGAAkG;gBAClG,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;aAC7D;YAED,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAED,sCAAM,GAAN;QACI,iDAAiD;QACjD,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAC;;IAnBQ,qBAAqB;QADjC,iBAAU,EAAE;qEAEiB,iBAAU,oBAAV,iBAAU;OAD3B,qBAAqB,CAoBjC;IAAD,4BAAC;CAAA,AApBD,IAoBC;AApBY,sDAAqB","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    login(username: string, password: string) {\r\n        return this.http.post<any>('/user/login', { username: username, password: password })\r\n            .pipe(map(user => {\r\n                // login successful if there's a jwt token in the response\r\n                if (user && user.token) {\r\n                    // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                    localStorage.setItem('currentUser', JSON.stringify(user));\r\n                }\r\n\r\n                return user;\r\n            }));\r\n    }\r\n\r\n    logout() {\r\n        // remove user from local storage to log user out\r\n        localStorage.removeItem('currentUser');\r\n    }\r\n}"]}]}