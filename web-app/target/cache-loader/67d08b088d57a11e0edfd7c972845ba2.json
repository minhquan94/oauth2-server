{"remainingRequest":"C:\\Project\\oauth2-server\\web-app\\node_modules\\thread-loader\\dist\\cjs.js??ref--10-2!C:\\Project\\oauth2-server\\web-app\\node_modules\\ts-loader\\index.js??ref--10-3!C:\\Project\\oauth2-server\\web-app\\node_modules\\angular-router-loader\\src\\index.js!C:\\Project\\oauth2-server\\web-app\\node_modules\\tslint-loader\\index.js!C:\\Project\\oauth2-server\\web-app\\src\\app\\services\\auth.service.ts","dependencies":[{"path":"C:\\Project\\oauth2-server\\web-app\\src\\app\\services\\auth.service.ts","mtime":1536258055646},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1536167841040},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\ts-loader\\index.js","mtime":1530127508000},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Project\\oauth2-server\\web-app\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/http\");\r\nrequire(\"rxjs/add/operator/map\");\r\nvar app_component_1 = require(\"../app.component\");\r\nvar AuthService = /** @class */ (function () {\r\n    function AuthService(http) {\r\n        this.http = http;\r\n    }\r\n    AuthService.prototype.logIn = function (user) {\r\n        var headers = new http_1.Headers();\r\n        headers.append('Accept', 'application/json');\r\n        // creating base64 encoded String from user name and password\r\n        var base64Credential = btoa(user.username + ':' + user.password);\r\n        headers.append('Authorization', 'Basic ' + base64Credential);\r\n        var options = new http_1.RequestOptions();\r\n        options.headers = headers;\r\n        return this.http.get(app_component_1.AppComponent.API_URL + '/account/login', options)\r\n            .map(function (response) {\r\n            // login successful if there's a jwt token in the response\r\n            var userResponse = response.json().principal; // the returned user object is a principal object\r\n            if (userResponse) {\r\n                // store user details  in local storage to keep user logged in between page refreshes\r\n                localStorage.setItem('currentUser', JSON.stringify(userResponse));\r\n            }\r\n        });\r\n    };\r\n    AuthService.prototype.logOut = function () {\r\n        // remove user from local storage to log user out\r\n        return this.http.post(app_component_1.AppComponent.API_URL + 'logout', {})\r\n            .map(function (response) {\r\n            localStorage.removeItem('currentUser');\r\n        });\r\n    };\r\n    var _a;\r\n    AuthService = tslib_1.__decorate([\r\n        core_1.Injectable(),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.Http !== \"undefined\" && http_1.Http) === \"function\" && _a || Object])\r\n    ], AuthService);\r\n    return AuthService;\r\n}());\r\nexports.AuthService = AuthService;\r\n",{"version":3,"file":"C:\\Project\\oauth2-server\\web-app\\src\\app\\services\\auth.service.ts","sourceRoot":"","sources":["C:\\Project\\oauth2-server\\web-app\\node_modules\\angular-router-loader\\src\\index.js!C:\\Project\\oauth2-server\\web-app\\node_modules\\tslint-loader\\index.js!C:\\Project\\oauth2-server\\web-app\\src\\app\\services\\auth.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,sCAAwE;AAExE,iCAA+B;AAC/B,kDAAgD;AAEhD;IACI,qBAAmB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAAI,CAAC;IAE3B,2BAAK,GAAZ,UAAa,IAAU;QAEnB,IAAM,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC9B,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QAC7C,6DAA6D;QAC7D,IAAM,gBAAgB,GAAW,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3E,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,QAAQ,GAAG,gBAAgB,CAAC,CAAC;QAE7D,IAAM,OAAO,GAAG,IAAI,qBAAc,EAAE,CAAC;QACrC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;QAE1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,4BAAY,CAAC,OAAO,GAAG,gBAAgB,EAAE,OAAO,CAAC;aACjE,GAAG,CAAC,UAAC,QAAkB;YACpB,0DAA0D;YAC1D,IAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC,CAAC,iDAAiD;YACjG,IAAI,YAAY,EAAE;gBACd,qFAAqF;gBACrF,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;aACrE;QACL,CAAC,CAAC,CAAC;IACX,CAAC;IAED,4BAAM,GAAN;QACI,iDAAiD;QACjD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,4BAAY,CAAC,OAAO,GAAG,QAAQ,EAAE,EAAE,CAAC;aACrD,GAAG,CAAC,UAAC,QAAkB;YACpB,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IAEX,CAAC;;IAhCQ,WAAW;QADvB,iBAAU,EAAE;qEAEgB,WAAI,oBAAJ,WAAI;OADpB,WAAW,CAiCvB;IAAD,kBAAC;CAAA,AAjCD,IAiCC;AAjCY,kCAAW","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers, RequestOptions, Response } from '@angular/http';\r\nimport { User } from '../model/model.user';\r\nimport 'rxjs/add/operator/map';\r\nimport { AppComponent } from '../app.component';\r\n@Injectable()\r\nexport class AuthService {\r\n    constructor(public http: Http) { }\r\n\r\n    public logIn(user: User) {\r\n\r\n        const headers = new Headers();\r\n        headers.append('Accept', 'application/json');\r\n        // creating base64 encoded String from user name and password\r\n        const base64Credential: string = btoa(user.username + ':' + user.password);\r\n        headers.append('Authorization', 'Basic ' + base64Credential);\r\n\r\n        const options = new RequestOptions();\r\n        options.headers = headers;\r\n\r\n        return this.http.get(AppComponent.API_URL + '/account/login', options)\r\n            .map((response: Response) => {\r\n                // login successful if there's a jwt token in the response\r\n                const userResponse = response.json().principal; // the returned user object is a principal object\r\n                if (userResponse) {\r\n                    // store user details  in local storage to keep user logged in between page refreshes\r\n                    localStorage.setItem('currentUser', JSON.stringify(userResponse));\r\n                }\r\n            });\r\n    }\r\n\r\n    logOut() {\r\n        // remove user from local storage to log user out\r\n        return this.http.post(AppComponent.API_URL + 'logout', {})\r\n            .map((response: Response) => {\r\n                localStorage.removeItem('currentUser');\r\n            });\r\n\r\n    }\r\n}\r\n"]}]}